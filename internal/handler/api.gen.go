// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// InternalServiceError defines model for InternalServiceError.
type InternalServiceError struct {
	Code    *int         `json:"code,omitempty"`
	Message *interface{} `json:"message,omitempty"`
}

// Post defines model for Post.
type Post struct {
	AuthorId  *int    `json:"author_id,omitempty"`
	Body      *string `json:"body,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Id        *int64  `json:"id,omitempty"`

	// ImagesFile Отправляет на сервер картинки в бинарном формате
	ImagesFile *[]openapi_types.File `json:"images_file,omitempty"`

	// ImagesUrl Возвращает url для получения картинок
	ImagesUrl *[]string `json:"images_url,omitempty"`
	Likes     *int      `json:"likes,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
}

// Posts defines model for Posts.
type Posts = []Post

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Limit post limit params
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLikesParams defines parameters for GetLikes.
type GetLikesParams struct {
	// PostId post id params
	PostId int `form:"post_id" json:"post_id"`
}

// LikePostParams defines parameters for LikePost.
type LikePostParams struct {
	// PostId post id params
	PostId int `form:"post_id" json:"post_id"`

	// UserId user id params
	UserId int `form:"user_id" json:"user_id"`
}

// CreatePostMultipartBody defines parameters for CreatePost.
type CreatePostMultipartBody struct {
	AuthorId   *string               `json:"author_id,omitempty"`
	Body       *string               `json:"body,omitempty"`
	ImagesFile *[]openapi_types.File `json:"images_file,omitempty"`
	Title      *string               `json:"title,omitempty"`
}

// GetPostParams defines parameters for GetPost.
type GetPostParams struct {
	// Title post title params
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// UpdatePostMultipartBody defines parameters for UpdatePost.
type UpdatePostMultipartBody struct {
	Body       *string               `json:"body,omitempty"`
	ImagesFile *[]openapi_types.File `json:"images_file,omitempty"`
	Title      *string               `json:"title,omitempty"`
}

// CreatePostMultipartRequestBody defines body for CreatePost for multipart/form-data ContentType.
type CreatePostMultipartRequestBody CreatePostMultipartBody

// UpdatePostMultipartRequestBody defines body for UpdatePost for multipart/form-data ContentType.
type UpdatePostMultipartRequestBody UpdatePostMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// pong
	// (GET /pong)
	Pong(w http.ResponseWriter, r *http.Request)
	// Get all posts
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)
	// Get Likes for post
	// (GET /posts/like)
	GetLikes(w http.ResponseWriter, r *http.Request, params GetLikesParams)
	// Like post
	// (POST /posts/like)
	LikePost(w http.ResponseWriter, r *http.Request, params LikePostParams)
	// Create new post
	// (POST /posts/new)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete post
	// (DELETE /posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id int)
	// Get post
	// (GET /posts/{id})
	GetPost(w http.ResponseWriter, r *http.Request, id int, params GetPostParams)
	// Update post
	// (PUT /posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// pong
// (GET /pong)
func (_ Unimplemented) Pong(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all posts
// (GET /posts)
func (_ Unimplemented) GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Likes for post
// (GET /posts/like)
func (_ Unimplemented) GetLikes(w http.ResponseWriter, r *http.Request, params GetLikesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Like post
// (POST /posts/like)
func (_ Unimplemented) LikePost(w http.ResponseWriter, r *http.Request, params LikePostParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new post
// (POST /posts/new)
func (_ Unimplemented) CreatePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete post
// (DELETE /posts/{id})
func (_ Unimplemented) DeletePost(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get post
// (GET /posts/{id})
func (_ Unimplemented) GetPost(w http.ResponseWriter, r *http.Request, id int, params GetPostParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update post
// (PUT /posts/{id})
func (_ Unimplemented) UpdatePost(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Pong operation middleware
func (siw *ServerInterfaceWrapper) Pong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Pong(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLikes operation middleware
func (siw *ServerInterfaceWrapper) GetLikes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLikesParams

	// ------------- Required query parameter "post_id" -------------

	if paramValue := r.URL.Query().Get("post_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "post_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "post_id", r.URL.Query(), &params.PostId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLikes(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LikePost operation middleware
func (siw *ServerInterfaceWrapper) LikePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LikePostParams

	// ------------- Required query parameter "post_id" -------------

	if paramValue := r.URL.Query().Get("post_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "post_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "post_id", r.URL.Query(), &params.PostId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	// ------------- Required query parameter "user_id" -------------

	if paramValue := r.URL.Query().Get("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LikePost(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostParams

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPost(w, r, id, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pong", wrapper.Pong)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.GetPosts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/like", wrapper.GetLikes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/like", wrapper.LikePost)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/new", wrapper.CreatePost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{id}", wrapper.DeletePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{id}", wrapper.GetPost)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/posts/{id}", wrapper.UpdatePost)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY72obRxB/lWXTL4Xz3clpSxHkQ+uE1CWEgOmnEsL6bnza9P5ld8+OCQLZKS2FQqAP",
	"UOgbqG5FHMWWXmH2jcrunf5c7mQ5/0ga/MWWdndmZ+b325nRPKFBluRZCqmStPuEyqAHCbMft1MFImXx",
	"Doh9HsAtITJh1nOR5SAUB3sqyEIw/+ExS/IYaHcuRySIfRAErKBD1WFutnmqIAJB+w5NQEoWXUq8358r",
	"yHYfQqCM/L1MqqZFrFC9TDzgYU1vZ7PNgt0sPKxf/z3bZ4RLonpAdkGqheFSCZ5GRioQwBSED5iqy276",
	"na83/M6G32mTKg3ay0Ri5IwVX33RGhaesAjkgz0e29CEIAPBc8WzlHYp/qmPcaoHOMQTfKmf4UgfEzzH",
	"IdFHONIDPDF/CY5xqAf6GE/xHMd4SvCE4N/221AP8BwneEb0zzjRAzzDoT7GEXUoV5DImpW7PGXisM2d",
	"aoEJwQ6XrC5E3GL0HzjB53hizNa/4dAaXYiY4L/GB4JTnOBL/VT/iiM8x1OztOzABMfL1q21JeY/lVyY",
	"Y+O3BVpxFcPrw1/k4WvD36/oaq2aO/KZgD3apde8xSP0qhfoWXI3fDN64HH5Qm5mgWzGOuhxEmZBkUCq",
	"mFkjNz6nDrW40J5Suex6XpRtBD3u8sy75lnw0r2sfM2pYoH1qy6g3AS8LeMLbN/dMiINWh5ZoE4sw54Z",
	"ZCc41k/xzECqj3GofymBneKE7BywKALhUoNVAKm0MKQsMa5+k7OgB2TT9Wt2dz3v4ODAZXbXzUTkVaLS",
	"u7O9devuzq2NTdd3eyqJl8Cl1VULqukBTnCEY2MT2coKIeG7Ypc6dB+ELL3puL7rGyVZDinLOe3S667v",
	"XqcOzZnq2ah7eZZG5kMENl4mBdl4b4e0S++ZTYcKkHlmTDQnNn1/FmNIrQzL85gHVsp7KM3VswzcQvN+",
	"I+g7RRCAlHtFTOa320wpiyQxz7ZL89IOxSJJuz/SHrBY9eh9c8jLZ3xs9eA2qJKwxmfBElAgjI5X+Wa0",
	"kJgnXBF7zghws/GoAJs5KlTtEeos+bd4OXbvRsdvSYf9+28ZxXVvTF4+sg798h1e3lpfW2xZXRAXMN8G",
	"RVgck7xCbIZ3+X0Jbs+kxoswv2NT52Uw5+HFgJtDpgob/B4VXEBIu0oU0EqBzgdA/lMB3kJG9jJh4W9B",
	"37GfmnAbwXulyEcAt/PqtYUEsfZac+h9sOz/TQuD7Co2LHJBCge2fW4lx5Ztcit6mNiCVN9W7fKSv0kR",
	"K54zoTzTM26ETLG6y6/ZnC/arPW9udvaZte757dpad+oP2z+UGlCWMaWpHAwA6lO3v5V5ltL8WYMVxP9",
	"CQ/75aOOQUGT6zft+punQtMULlLSVc17v8iXaK0udhe1sx8aX6f1QptoLq5zZS5qb5/t3g3Vno6uGHW5",
	"Lmp171S00OkHOwP4aDLGO6rOn3DJLQGzKF/V3bd5K0uBbKu5/flaYwj4F07xVB/hBMcEJzi140o7FsIX",
	"RB/NpoC/43M7R7JDSTviPMPTesMvaTOR1tVPcaKP9LFRtFJv/bfLep3/6IF+ilOcrtCII3yx0BmJrMjb",
	"lFYjmepYNZHp3+//FwAA//+AErHDixcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
